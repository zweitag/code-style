require:
  - 'rubocop-performance'
  - 'rubocop-rails'

AllCops:
  Exclude:
    - db/schema.rb # Let rails do its stuff
    - db/migrate/{2015,2016,2017,2018,2019,2020}*.rb # do not enforce rule compliance on old migrations
    - db/migrate/20210[1-6]*.rb # do not enforce rule compliance on old migrations
    - bin/**/* # Let gems do their stuff
    - vendor/bundle/**/* # Let gems do their stuff
    - .pryrc # Do what you want here
    - doc/**/*
    - node_modules/**/*
  NewCops: enable

# Disable cops with RuFo incompabilities:

Layout:
  Enabled: false

Style/Semicolon:
  Enabled: false
Style/StringLiterals:
  Enabled: false
Style/StringLiteralsInInterpolation:
  Enabled: false
Style/TrailingCommaInArguments:
  Enabled: false
Style/TrailingCommaInArrayLiteral:
  Enabled: false
Style/TrailingCommaInHashLiteral:
  Enabled: false
Style/TrailingMethodEndStatement:
  Enabled: false
Style/WhileUntilDo:
  Enabled: false

###

# Disable cops with reasons:

Rails/ApplicationRecord:
  Exclude:
    - db/migrate/* # You **should** mock models in migrations and use ActiveRecord::Base rather than ApplicationRecord!

Style/ClassAndModuleChildren: # Each version has its own benefits depending on the situation
  Enabled: false
Style/Documentation: # We currently do not enforce documentation. Do it where you feel it is useful!
  Enabled: false
Style/EmptyMethod: # Do not allow `def foo; end` for empty methods as semicolons are discouraged in ruby
  EnforcedStyle: expanded
Style/FrozenStringLiteralComment: # Might be enabled in the future
  Enabled: false
Style/Lambda: # Always use `->` instead of `lambda`, as the latter does not work with `do ... end` and we do not want to use `{ ... }` for multiline-blocks (see https://github.com/rubocop-hq/rubocop/issues/1520)
  EnforcedStyle: literal
Style/NumericPredicate: # Sometimes "== 0" is easier to read than .zero?
  Enabled: false
###

# Tune metrics cops

# Background: metrics cops, although they are sometimes annoying, give you a stimulus to think about the complexity of the code.
# So, while it is true that good code style is best ensured by peer review, pair programming or ensemble (mob) programming, it's
# good that the metrics cops have your back and act as a last line of defense while you are wrapping your head around other
# aspects. Therefore we soften the default limits, so that the cops are not too whiny and annouy the developers, but we keep them
# enabled.
# Recommendation: if you offend a metrics cop for good reason, disable that specific cop in the offending file only (see
# https://docs.rubocop.org/rubocop/configuration.html#disabling-cops-within-source-code).

Metrics/ClassLength:
  Max: 200
Metrics/ModuleLength:
  Max: 200
Metrics/MethodLength:
  Max: 30
  CountAsOne: ['array', 'heredoc', 'hash'] #  Do not incentivise against multi-line and in-method constants and declarative programming
  Exclude:
    - db/migrate/**/* # let migrations do what they need
Metrics/BlockLength:
  Exclude:
    - config/**/* # There is no reason to artificially break up config blocks
    - lib/tasks/**/*.rake
    - spec/**/* # describe or context blocks may be large
Metrics/ParameterLists:
  Max: 3 # more than 3 positional arguments get confusing
  CountKeywordArgs: false # keyword args are OK, they are way more readable than positional args

###
